$date
	Mon Dec  9 20:36:12 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module Or8Way_test $end
$scope module or8Way $end
$var wire 8 ! in [7:0] $end
$var wire 1 " out $end
$var wire 1 # w0 $end
$var wire 1 $ w1 $end
$var wire 1 % w2 $end
$var wire 1 & w3 $end
$var wire 1 ' w4 $end
$var wire 1 ( w5 $end
$scope module or0 $end
$var wire 1 ) a $end
$var wire 1 * b $end
$var wire 1 # out $end
$var wire 1 + w0 $end
$var wire 1 , w1 $end
$scope module not0 $end
$var wire 1 ) in $end
$var wire 1 + out $end
$upscope $end
$scope module not1 $end
$var wire 1 * in $end
$var wire 1 , out $end
$upscope $end
$upscope $end
$scope module or1 $end
$var wire 1 - a $end
$var wire 1 . b $end
$var wire 1 $ out $end
$var wire 1 / w0 $end
$var wire 1 0 w1 $end
$scope module not0 $end
$var wire 1 - in $end
$var wire 1 / out $end
$upscope $end
$scope module not1 $end
$var wire 1 . in $end
$var wire 1 0 out $end
$upscope $end
$upscope $end
$scope module or2 $end
$var wire 1 1 a $end
$var wire 1 2 b $end
$var wire 1 % out $end
$var wire 1 3 w0 $end
$var wire 1 4 w1 $end
$scope module not0 $end
$var wire 1 1 in $end
$var wire 1 3 out $end
$upscope $end
$scope module not1 $end
$var wire 1 2 in $end
$var wire 1 4 out $end
$upscope $end
$upscope $end
$scope module or3 $end
$var wire 1 5 a $end
$var wire 1 6 b $end
$var wire 1 & out $end
$var wire 1 7 w0 $end
$var wire 1 8 w1 $end
$scope module not0 $end
$var wire 1 5 in $end
$var wire 1 7 out $end
$upscope $end
$scope module not1 $end
$var wire 1 6 in $end
$var wire 1 8 out $end
$upscope $end
$upscope $end
$scope module or4 $end
$var wire 1 # a $end
$var wire 1 $ b $end
$var wire 1 ' out $end
$var wire 1 9 w0 $end
$var wire 1 : w1 $end
$scope module not0 $end
$var wire 1 # in $end
$var wire 1 9 out $end
$upscope $end
$scope module not1 $end
$var wire 1 $ in $end
$var wire 1 : out $end
$upscope $end
$upscope $end
$scope module or5 $end
$var wire 1 % a $end
$var wire 1 & b $end
$var wire 1 ( out $end
$var wire 1 ; w0 $end
$var wire 1 < w1 $end
$scope module not0 $end
$var wire 1 % in $end
$var wire 1 ; out $end
$upscope $end
$scope module not1 $end
$var wire 1 & in $end
$var wire 1 < out $end
$upscope $end
$upscope $end
$scope module or6 $end
$var wire 1 ' a $end
$var wire 1 ( b $end
$var wire 1 " out $end
$var wire 1 = w0 $end
$var wire 1 > w1 $end
$scope module not0 $end
$var wire 1 ' in $end
$var wire 1 = out $end
$upscope $end
$scope module not1 $end
$var wire 1 ( in $end
$var wire 1 > out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
x>
x=
x<
x;
x:
x9
x8
x7
x6
x5
x4
x3
x2
x1
x0
x/
x.
x-
x,
x+
x*
x)
x(
x'
x&
x%
x$
x#
x"
bx !
$end
#1
0"
1=
1>
0'
0(
19
1:
1;
1<
0#
0$
0%
0&
1+
1,
1/
10
13
14
17
18
0)
0*
0-
0.
01
02
05
06
b0 !
#2
1"
0=
1'
09
1#
0+
1)
b1 !
#3
1+
0,
0)
1*
b10 !
#4
0:
1$
0+
0/
00
1)
1-
1.
b1111 !
#5
0"
1=
0'
19
1:
0#
0$
1+
1,
1/
10
0)
0*
0-
0.
b0 !
#6
1"
0=
0>
1'
1(
09
0:
0;
0<
1#
1$
1%
1&
0+
0,
0/
00
03
04
07
08
1)
1*
1-
1.
11
12
15
16
b11111111 !
#7
1=
0'
19
1:
1;
0#
0$
0%
1+
1,
1/
10
13
14
17
0)
0*
0-
0.
01
02
05
b10000000 !
#8
